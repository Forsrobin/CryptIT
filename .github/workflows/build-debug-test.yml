# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Debug build and Test

on:
  push:
    branches: [ "ci" ]
  pull_request:
    branches: [ "ci" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
    steps:
    - uses: actions/checkout@v3


    # Ubuntu related steps
    - name: Free Disk Space (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
      
    - name: Get Conan
      uses: turtlebrowser/get-conan@main
      
    - name: Create default profile
      run: conan profile detect --force

    - name: Create conan profile
      run: bash setup.sh ${{ matrix.os }} ${{ matrix.build_type }}
    
    - name: List conan profiles
      run: conan profile list

    - name: Install dependencies
      run: conan install . --build=missing --profile=${{ matrix.os }}
      
    - name: Install Tree
      run: sudo apt install tree && sudo tree -a

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=build" >> "$GITHUB_OUTPUT"

    # Activate conan environment
    - name: Activate conan environment
      run: bash ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/generators/conanbuild.sh

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/generators/conan_toolchain.cmake
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=true

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Tree
      run: sudo tree -a

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/src/tests
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: ctest -C ${{ matrix.build_type }}
